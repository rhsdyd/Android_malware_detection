from flask_restful import Resource, Api
from flask_restful import reqparse
from flask import Flask, jsonify
import json
import pandas as pd
from db import connect_to_db
from db import get_database_name
import joblib
import numpy as np
from datetime import datetime
import tensorflow as tf
import copy

app = Flask(__name__)
api = Api(app)


class Predict(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('app_name')
        parser.add_argument('sha256')
        parser.add_argument('permissions', action='append')
        parser.add_argument('receivers', action='append')
        parser.add_argument('activities', action='append')
        parser.add_argument('services', action='append')
        parser.add_argument('API_methods', action='append')
        parser.add_argument('intent-actions', action='append')
        parser.add_argument('intent-categories', action='append')
        args = parser.parse_args()

        app_name = args['app_name']
        sha256 = args['sha256']

        input = []

        if args['permissions']:
            p = ['p:' + i for i in args['permissions']]
            input.append(p)
        else:
            args['permissions'] = []

        if args['receivers']:
            r = ['r:' + i for i in args['receivers']]
            input.append(r)
        else:
            args['receivers'] = []

        if args['activities']:
            a = ['a:' + i for i in args['activities']]
            input.append(a)
        else:
            args['activities'] = []

        if args['services']:
            s = ['s:' + i for i in args['services']]
            input.append(s)
        else:
            args['services'] = []

        if args['API_methods']:
            apim = ['apim:' + i for i in args['API_methods']]
            input.append(apim)
        else:
            args['API_methods'] = []

        if args['intent-actions']:
            ia = ['i:' + i for i in args['intent-actions']]
            input.append(ia)
        else:
            args['intent-actions'] = []

        if args['intent-categories']:
            ig = ['i:' + i for i in args['intent-categories']]
            input.append(ig)
        else:
            args['intent-categories'] = []

        conn = connect_to_db()
        db = conn.get_database(get_database_name())

        ifs = np.concatenate(input)
        best_features = list(pd.DataFrame(list(db.get_collection('bestFeatures').find()))['features'])
        test_df = pd.DataFrame(np.ones((1, len(best_features))), dtype=int, columns=best_features)
        diff = list(set(best_features) - set(ifs))
        test_df.loc[[0], diff] = 0
        test = copy.deepcopy(test_df)
        test = np.array(test, dtype=np.float32)
        with graph.as_default():
            prediction = model.predict(test)
        if prediction >= 0.5:
            pred = 'malware'
        else:
            pred = 'benign'
        data = args
        del data['app_name']
        del data['sha256']

        features = json.dumps(data)

        now = datetime.now()

        # dd/mm/YY H:M:S
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        df = pd.DataFrame({'app_name': [app_name],
                           'sha256': [sha256],
                           'label': [pred],
                           'features': [features],
                           'time': [dt_string]})

        db.extractedFeaturesWeb.insert_many(json.loads(df.to_json(orient='records')))

        return {'response': pred}


api.add_resource(Predict, '/')

'''
@app.route("/")
def hello():
    parser = reqparse.RequestParser()
    parser.add_argument('permissions')
    parser.add_argument('activities')

    args = parser.parse_args()

    sum = len(args['permissions']) + len(args['activities'])
    return {'sum': sum}
'''

if __name__ == "__main__":
    model = tf.keras.models.load_model('classifier/malware_detection_model.h5')
    global graph
    graph = tf.get_default_graph()
    app.run(debug=True, host="0.0.0.0", port="5000")
