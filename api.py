from flask_restful import Resource, Api
from flask_restful import reqparse
from flask import Flask, jsonify
import json
import pandas as pd
from db import connect_to_db
from db import get_database_name
import joblib
import numpy as np

app = Flask(__name__)
api = Api(app)


class Predict(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('app_name')
        parser.add_argument('permissions', action='append')
        parser.add_argument('receivers', action='append')
        parser.add_argument('activities', action='append')
        parser.add_argument('services', action='append')
        parser.add_argument('API_methods', action='append')
        args = parser.parse_args()

        app_name = args['app_name']

        p = ['p:' + i for i in args['permissions']]
        r = ['r:' + i for i in args['receivers']]
        a = ['a:' + i for i in args['activities']]
        s = ['s:' + i for i in args['services']]
        apim = ['apim:' + i for i in args['API_methods']]

        conn = connect_to_db()
        db = conn.get_database(get_database_name())

        ifs = np.concatenate([p, r, a, s, apim])
        chi = pd.DataFrame(list(db.get_collection('permissionsVectorMatrix').find()))
        s = chi.drop(['_id', 'app_name', 'label'], axis=1)
        s.columns = 'p:' + s.columns
        sl = s.columns.to_list()
        test_df = pd.DataFrame(np.ones((1, len(sl))), dtype=int, columns=sl)
        diff = list(set(sl) - set(ifs))
        test_df.loc[[0], diff] = 0
        pred = model.predict(test_df)
        data = args
        del data['app_name']

        features = json.dumps(data)

        df = pd.DataFrame({'app_name': [app_name],
                           'label': [pred[0]],
                           'features': [features]})

        db.extractedFeaturesWeb.insert_many(json.loads(df.to_json(orient='records')))

        '''
        parser.add_argument('data')

        args = parser.parse_args()

        data = json.loads(args['data'])

        app_name = data['app_name']

        p = ['p:' + i for i in data['permissions']]
        r = ['r:' + i for i in data['receivers']]
        a = ['a:' + i for i in data['activities']]
        s = ['s:' + i for i in data['services']]
        apim = ['apim:' + i for i in data['API_methods']]
        
        conn = connect_to_db()
        db = conn.get_database(get_database_name())

        ifs = np.concatenate([p, r, a, s, apim])
        chi = pd.DataFrame(list(db.get_collection('permissionsVectorMatrix').find()))
        s = chi.drop(['_id', 'app_name', 'label'], axis=1)
        s.columns = 'p:' + s.columns
        sl = s.columns.to_list()
        test_df = pd.DataFrame(np.ones((1, len(sl))), dtype=int, columns=sl)
        diff = list(set(sl) - set(ifs))
        test_df.loc[[0], diff] = 0
        pred = model.predict(test_df)

        del data['app_name']

        features = json.dumps(data)

        df = pd.DataFrame({'app_name': [app_name],
                           'label': [pred[0]],
                           'features': [features]})

        db.extractedFeaturesWeb.insert_many(json.loads(df.to_json(orient='records')))
        '''
        return {'response': pred[0]}


api.add_resource(Predict, '/')

'''
@app.route("/")
def hello():
    parser = reqparse.RequestParser()
    parser.add_argument('permissions')
    parser.add_argument('activities')

    args = parser.parse_args()

    sum = len(args['permissions']) + len(args['activities'])
    return {'sum': sum}
'''

if __name__ == "__main__":
    model = joblib.load('classifier/model1.pkl')
    app.run(debug=True, port=5000)
