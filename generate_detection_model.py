import pandas as pd
import numpy as np
from feature_selection import helper
import copy
import tensorflow as tf

from db import connect_to_db
from db import get_database_name


def main():
    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    total_fs = helper.fetch_preprocessed_all_binary(db)

    data = total_fs.drop(['label'], axis='columns')
    label = total_fs['label']

    best_features = pd.DataFrame(list(db.get_collection('bestFeatures').find()))['features']

    dnn_label = copy.deepcopy(label)
    dnn_data = copy.deepcopy(data[best_features])

    dnn_label[dnn_label == 'malware'] = 1
    dnn_label[dnn_label == 'benign'] = 0

    dnn_data = np.array(dnn_data, dtype=np.float32)
    dnn_label = np.array(dnn_label, dtype=np.float32)

    tf.model = tf.keras.Sequential()
    tf.model.add(tf.keras.layers.Dense(units=128, input_dim=dnn_data.shape[1]))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=64))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=32))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=1))
    tf.model.add(tf.keras.layers.Activation('sigmoid'))
    tf.model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.SGD(lr=0.1), metrics=['accuracy'])
    tf.model.summary()

    history = tf.model.fit(dnn_data, dnn_label, epochs=100, batch_size=100)

    print("Save Classification model")
    tf.model.save("classifier/malware_detection_model.h5")

if __name__ == "__main__":
    main()
