import pandas as pd
import numpy as np
from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score
from sklearn.svm import SVC
from sklearn import metrics
import tensorflow as tf
import xgboost as xgb
import copy
from sklearn.model_selection import train_test_split



def fitness_function_svm(data, label):
    X_train, X_test, y_train, y_test = train_test_split(data, label)
    svm = SVC(C=100, gamma=0.0001, kernel="rbf")
    svm.fit(X_train, y_train)
    predict = svm.predict(X_test)
    ac_score = metrics.accuracy_score(y_test, predict)
    return ac_score

def fitness_function_xgb(data, label):
    X_train, X_test, y_train, y_test = train_test_split(data, label)
    xgb_model = xgb.XGBClassifier(booster='gbtree',
                                  colsample_bylevel=0.9,
                                  colsample_bytree=0.8,
                                  eta=0.3,
                                  gamma=0,
                                  max_depth=8,
                                  min_child_weight=3,
                                  n_estimators=50,
                                  nthread=4,
                                  objective='binary:logistic',
                                  random_state=2,
                                  silent=True)
    xgb_model.fit(X_train,y_train, eval_set=[(X_test,y_test)],
                 early_stopping_rounds=50)

    predict = xgb_model.predict(X_test)
    ac_score = metrics.accuracy_score(y_test, predict)
    return ac_score


def fitness_function_dnn(data, label):
    dnn_label = copy.deepcopy(label)
    dnn_data = copy.deepcopy(data)
    X_train, X_test, y_train, y_test = train_test_split(dnn_data, dnn_label)

    y_train[y_train == 'malware'] = 1
    y_train[y_train == 'benign'] = 0

    X_train = np.array(X_train, dtype=np.float32)
    y_train = np.array(y_train, dtype=np.float32)

    tf.model = tf.keras.Sequential()
    tf.model.add(tf.keras.layers.Dense(units=128, input_dim=data.shape[1]))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=64))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=32))
    tf.model.add(tf.keras.layers.Activation('relu'))
    tf.model.add(tf.keras.layers.Dropout((0.2)))

    tf.model.add(tf.keras.layers.Dense(units=1))
    tf.model.add(tf.keras.layers.Activation('sigmoid'))
    tf.model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.SGD(lr=0.1), metrics=['accuracy'])
    tf.model.summary()

    history = tf.model.fit(X_train, y_train, epochs=100, batch_size=100)

    y_test[y_test == 'malware'] = 1
    y_test[y_test == 'benign'] = 0

    X_test = np.array(X_test, dtype=np.float32)
    y_test = np.array(y_test, dtype=np.float32)

    predictions = tf.model.predict(X_test)

    score = tf.model.evaluate(X_test, y_test)

    return score[1]