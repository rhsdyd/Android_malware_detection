import sys
import pandas as pd
import json
import argparse
from db import connect_to_db
from db import get_database_name
from sklearn.feature_selection import chi2
from functools import reduce
import helper


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--outputCSV", default=False, action="store_true", help="output CSV",
                        required=False)
    parser.add_argument("--outputDB", default=False, action="store_true", help="output DB",
                        required=False)
    args = parser.parse_args()

    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    permissions_df = helper.chunk_read('permissions', db)
    permissions_fs = permissions_df.drop(['_id', 'app_name', 'label'], axis='columns')
    permissions_fs.columns = 'p:' + permissions_fs.columns
    permissions_fs = pd.concat([permissions_df['_id'], permissions_fs], axis='columns')
    receivers_df = helper.chunk_read('receivers', db)
    receivers_fs = receivers_df.drop(['_id', 'app_name', 'label'], axis='columns')
    receivers_fs.columns = 'r:' + receivers_fs.columns
    receivers_fs = pd.concat([receivers_df['_id'], receivers_fs], axis='columns')
    services_df = helper.chunk_read('services', db)
    services_fs = services_df.drop(['_id', 'app_name', 'label'], axis='columns')
    services_fs.columns = 's:' + services_fs.columns
    services_fs = pd.concat([services_df['_id'], services_fs], axis='columns')

    dfs = [permissions_df[['_id', 'label']], permissions_fs, receivers_fs, services_fs]
    total_fs = reduce(lambda left, right: pd.merge(left, right, on='_id'), dfs)
    total_fs = total_fs.drop(['_id'], axis='columns')

    X = total_fs.drop(['label'], axis='columns')
    y = total_fs['label']

    s, p = chi2(X, y)

    chi2_df = pd.DataFrame({'features': X.columns, 'CHI2': s})

    mat_name = 'chi_square'
    if args.outputDB:
        print('db: ', mat_name)
        col = db.get_collection(mat_name)
        if len(chi2_df) <= 10:
            col.insert_many(json.loads(chi2_df.to_json(orient='records', default_handler=str)))
        else:
            for i in range(0, len(chi2_df), 10):
                seq = chi2_df[i:i + 10]
                col.insert_many(json.loads(seq.to_json(orient='records', default_handler=str)))

    if args.outputCSV:
        print('csv: ', mat_name)
        chi2_df.to_csv('csv_results/' + mat_name + '.csv', index=False)


if __name__ == "__main__":
    main()
