import pandas as pd
import numpy as np
import json
import argparse
import helper
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn import metrics
from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import cross_validate
from sklearn.model_selection import KFold
from algorithm import GeneticAlgorithm as ga
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from db import connect_to_db
from db import get_database_name

def main():
    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    total_fs = helper.fetch_all(db)

    data = total_fs.drop(['label'], axis='columns')
    label = total_fs['label']

    result = ga.GeneticAlgorithm(data, label, fitness=f_function, population_size=10, children_size=10,
                                 generations=100)
    selected_features = result.get_best_individual()

# Define fitness function
def fit_cv(data, label):

    svm = SVC(C=100, gamma=0.0001, kernel="rbf")

    # kf = KFold(n_splits=9, random_state= 40)
    custom_scorer = {'accuracy': make_scorer(accuracy_score),
                     'precision': make_scorer(precision_score, pos_label="benign"),
                     'recall': make_scorer(recall_score, pos_label="benign"),
                     'f1': make_scorer(f1_score, pos_label="benign"),
                     }

    results = cross_validate(estimator=svm, X=data, y=label, cv=9, scoring=custom_scorer)
    return np.mean(results['test_accuracy'])


def f_function(data, label):
    X_train, X_test, y_train, y_test = train_test_split(data, label, random_state=0)
    svm = SVC(C=100, gamma=0.0001, kernel="rbf")
    svm.fit(X_train, y_train)
    predict = svm.predict(X_test)
    ac_score = metrics.accuracy_score(y_test, predict)
    return ac_score
