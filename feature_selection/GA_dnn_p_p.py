import pandas as pd
import argparse
import json
from algorithm import GeneticAlgorithm as ga
import sys
import os
import helper
import ML_for_wrapper
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from db import connect_to_db
from db import get_database_name

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--outputCSV", default=False, action="store_true", help="output CSV",
                        required=False)
    parser.add_argument("--outputDB", default=False, action="store_true", help="output DB",
                        required=False)
    args = parser.parse_args()

    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    total_fs = helper.fetch_preprocessed_all_binary(db)

    data = total_fs.drop(['label'], axis='columns')
    label = total_fs['label']

    fitness = ML_for_wrapper.fitness_function_dnn
    survivor_strategy = 'plus'
    recombination_strategy = 'point'

    result = ga.GeneticAlgorithm(data, label, fitness=fitness, population_size=20, children_size=20,
                                 generations=100, survivor_strategy=survivor_strategy,
                                 recombination_strategy=recombination_strategy)
    selected_features = result.get_best_individual()

    result_df = pd.DataFrame({'features': selected_features})

    mat_name = 'GA_dnn_p_p_all'
    if args.outputDB:
        print('db: ', mat_name)
        col = db.get_collection(mat_name)
        if len(result_df) <= 10:
            col.insert_many(json.loads(result_df.to_json(orient='records', default_handler=str)))
        else:
            for i in range(0, len(result_df), 10):
                seq = result_df[i:i + 10]
                col.insert_many(json.loads(seq.to_json(orient='records', default_handler=str)))

    if args.outputCSV:
        print('csv: ', mat_name)
        result_df.to_csv('csv_results/' + mat_name + '.csv', index=False)