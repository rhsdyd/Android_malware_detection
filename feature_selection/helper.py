import pandas as pd
import numpy as np
from functools import reduce
from time import sleep
import json as js


def df_split(data, label, num):
    pointer = round(len(data.columns) / num)

    result = []

    for i in range(0, num):
        if i + 1 != num:
            fraction = pd.concat([label, data.iloc[:, pointer * i: pointer * (i + 1)]], axis=1)
        else:
            fraction = pd.concat([label, data.iloc[:, pointer * i:]], axis=1)

        result.append(fraction)

    return result


def chunk_read(mat_name, db):
    n_records = db.get_collection(mat_name).find().count()
    df_list = []
    for i in range(0, n_records, 10):
        df = pd.DataFrame(list(db.get_collection(mat_name).find().skip(i).limit(10)))
        df_list.append(df)
    return pd.concat(df_list)


def merge(left, right):
    result = pd.merge(left, right, on='_id')
    sleep(1)
    return result


def fetch_all(db):
    permissions_df = chunk_read('permissionsVectorMatrix', db)
    permissions_fs = permissions_df.drop(['_id', 'app_name', 'label'], axis='columns')
    permissions_fs.columns = 'p:' + permissions_fs.columns
    permissions_fs = pd.concat([permissions_df['_id'], permissions_fs], axis='columns')
    sleep(1)

    receivers_df = chunk_read('receiversVectorMatrix', db)
    receivers_fs = receivers_df.drop(['_id', 'app_name', 'label'], axis='columns')
    receivers_fs.columns = 'r:' + receivers_fs.columns
    receivers_fs = pd.concat([receivers_df['_id'], receivers_fs], axis='columns')
    sleep(1)

    services_df = chunk_read('servicesVectorMatrix', db)
    services_fs = services_df.drop(['_id', 'app_name', 'label'], axis='columns')
    services_fs.columns = 's:' + services_fs.columns
    services_fs = pd.concat([services_df['_id'], services_fs], axis='columns')
    sleep(1)

    activities_df = chunk_read('activitiesVectorMatrix', db)
    activities_fs = activities_df.drop(['_id', 'app_name', 'label'], axis='columns')
    activities_fs.columns = 'a:' + activities_fs.columns
    activities_fs = pd.concat([activities_df['_id'], activities_fs], axis='columns')
    sleep(1)

    API_methods_df = chunk_read('API_methodsVectorMatrix', db)
    API_methods_fs = API_methods_df.drop(['_id', 'app_name', 'label'], axis='columns')
    API_methods_fs.columns = 'apim:' + API_methods_fs.columns
    API_methods_fs = pd.concat([API_methods_df['_id'], API_methods_fs], axis='columns')
    sleep(1)

    '''
    API_classes_df = chunk_read('API_classes', db)
    API_classes_fs = API_classes_df.drop(['_id', 'app_name', 'label'], axis='columns')
    API_classes_fs.columns = 'apic:' + API_classes_fs.columns
    API_classes_fs = pd.concat([API_classes_df['_id'], API_classes_fs], axis='columns')
    '''
    dfs = [permissions_df[['_id', 'label']], permissions_fs, receivers_fs,
           services_fs, activities_fs, API_methods_fs]
    total_fs = reduce(lambda left, right: merge(left, right), dfs)
    total_fs = total_fs.drop(['_id'], axis='columns')

    return total_fs

def fetch_preprocessed_all_binary(db):
    categories_features = pd.DataFrame(list(db.get_collection('preprocessed_categories_features').find()))

    permissions_df = chunk_read('preprocessed_permissionsBinaryVectors', db)
    permissions_df = permissions_df.reset_index(drop=True)
    codes = permissions_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'permissions']['features_name'].values[0])
    permissions_fs = pd.DataFrame(all_list, columns=json['f'])
    permissions_fs.columns = 'p:' + permissions_fs.columns
    permissions_fs = pd.concat([permissions_df['_id'], permissions_fs], axis='columns')
    sleep(1)

    receivers_df = chunk_read('preprocessed_receiversBinaryVectors', db)
    receivers_df = receivers_df.reset_index(drop=True)
    codes = receivers_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'receivers']['features_name'].values[0])
    receivers_fs = pd.DataFrame(all_list, columns=json['f'])
    receivers_fs.columns = 'r:' + receivers_fs.columns
    receivers_fs = pd.concat([receivers_df['_id'], receivers_fs], axis='columns')
    sleep(1)

    services_df = chunk_read('preprocessed_servicesBinaryVectors', db)
    services_df = services_df.reset_index(drop=True)
    codes = services_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'services']['features_name'].values[0])
    services_fs = pd.DataFrame(all_list, columns=json['f'])
    services_fs.columns = 's:' + services_fs.columns
    services_fs = pd.concat([services_df['_id'], services_fs], axis='columns')
    sleep(1)

    activities_df = chunk_read('preprocessed_activitiesBinaryVectors', db)
    activities_df = activities_df.reset_index(drop=True)
    codes = activities_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'activities']['features_name'].values[0])
    activities_fs = pd.DataFrame(all_list, columns=json['f'])
    activities_fs.columns = 'a:' + activities_fs.columns
    activities_fs = pd.concat([activities_df['_id'], activities_fs], axis='columns')
    sleep(1)

    actions_df = chunk_read('preprocessed_intent-actionsBinaryVectors', db)
    actions_df = actions_df.reset_index(drop=True)
    codes = actions_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'intent-actions']['features_name'].values[0])
    actions_fs = pd.DataFrame(all_list, columns=json['f'])
    actions_fs.columns = 'ia:' + actions_fs.columns
    actions_fs = pd.concat([actions_df['_id'], actions_fs], axis='columns')
    sleep(1)

    categories_df = chunk_read('preprocessed_intent-categoriesBinaryVectors', db)
    categories_df = categories_df.reset_index(drop=True)
    codes = categories_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(
        categories_features[categories_features.categories == 'intent-categories']['features_name'].values[0])
    categories_fs = pd.DataFrame(all_list, columns=json['f'])
    categories_fs.columns = 'ia:' + categories_fs.columns
    categories_fs = pd.concat([categories_df['_id'], categories_fs], axis='columns')
    sleep(1)

    API_methods_df = chunk_read('preprocessed_API_methodsBinaryVectors', db)
    API_methods_df = API_methods_df.reset_index(drop=True)
    codes = API_methods_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'API_methods']['features_name'].values[0])
    API_methods_fs = pd.DataFrame(all_list, columns=json['f'])
    API_methods_fs.columns = 'apim:' + API_methods_fs.columns
    API_methods_fs = pd.concat([API_methods_df['_id'], API_methods_fs], axis='columns')
    sleep(1)

    '''
    API_classes_df = chunk_read('preprocessed_API_classesBinaryVectors', db)
    API_classes_df = API_classes_df.reset_index(drop=True)
    codes = API_classes_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'API_classes']['features_name'].values[0])
    API_classes_fs = pd.DataFrame(all_list, columns=json['f'])
    API_classes_fs.columns = 'apic:' + API_classes_fs.columns
    API_classes_fs = pd.concat([API_classes_df['_id'], API_classes_fs], axis='columns')
    '''

    dfs = [permissions_df[['_id', 'label']], permissions_fs, receivers_fs,
           services_fs, activities_fs, actions_fs, categories_fs, API_methods_fs]
    total_fs = reduce(lambda left, right: merge(left, right), dfs)
    total_fs = total_fs.drop(['_id'], axis='columns')

    return total_fs

def fetch_all_binary(db):
    categories_features = pd.DataFrame(list(db.get_collection('categories_features').find()))

    permissions_df = chunk_read('permissionsBinaryVectors', db)
    permissions_df = permissions_df.reset_index(drop=True)
    codes = permissions_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'permissions']['features_name'].values[0])
    permissions_fs = pd.DataFrame(all_list, columns=json['f'])
    permissions_fs.columns = 'p:' + permissions_fs.columns
    permissions_fs = pd.concat([permissions_df['_id'], permissions_fs], axis='columns')
    sleep(1)

    receivers_df = chunk_read('receiversBinaryVectors', db)
    receivers_df = receivers_df.reset_index(drop=True)
    codes = receivers_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'receivers']['features_name'].values[0])
    receivers_fs = pd.DataFrame(all_list, columns=json['f'])
    receivers_fs.columns = 'r:' + receivers_fs.columns
    receivers_fs = pd.concat([receivers_df['_id'], receivers_fs], axis='columns')
    sleep(1)

    services_df = chunk_read('servicesBinaryVectors', db)
    services_df = services_df.reset_index(drop=True)
    codes = services_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'services']['features_name'].values[0])
    services_fs = pd.DataFrame(all_list, columns=json['f'])
    services_fs.columns = 's:' + services_fs.columns
    services_fs = pd.concat([services_df['_id'], services_fs], axis='columns')
    sleep(1)

    activities_df = chunk_read('activitiesBinaryVectors', db)
    activities_df = activities_df.reset_index(drop=True)
    codes = activities_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'activities']['features_name'].values[0])
    activities_fs = pd.DataFrame(all_list, columns=json['f'])
    activities_fs.columns = 'a:' + activities_fs.columns
    activities_fs = pd.concat([activities_df['_id'], activities_fs], axis='columns')
    sleep(1)
    
    actions_df = chunk_read('intent-actionsBinaryVectors', db)
    actions_df = actions_df.reset_index(drop=True)
    codes = actions_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'intent-actions']['features_name'].values[0])
    actions_fs = pd.DataFrame(all_list, columns=json['f'])
    actions_fs.columns = 'ia:' + actions_fs.columns
    actions_fs = pd.concat([actions_df['_id'], actions_fs], axis='columns')
    sleep(1)
    
    categories_df = chunk_read('intent-categoriesBinaryVectors', db)
    categories_df = categories_df.reset_index(drop=True)
    codes = categories_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'intent-categories']['features_name'].values[0])
    categories_fs = pd.DataFrame(all_list, columns=json['f'])
    categories_fs.columns = 'ia:' + categories_fs.columns
    categories_fs = pd.concat([categories_df['_id'], categories_fs], axis='columns')
    sleep(1)

    API_methods_df = chunk_read('API_methodsBinaryVectors', db)
    API_methods_df = API_methods_df.reset_index(drop=True)
    codes = API_methods_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'API_methods']['features_name'].values[0])
    API_methods_fs = pd.DataFrame(all_list, columns=json['f'])
    API_methods_fs.columns = 'apim:' + API_methods_fs.columns
    API_methods_fs = pd.concat([API_methods_df['_id'], API_methods_fs], axis='columns')
    sleep(1)

    '''
    API_classes_df = chunk_read('API_classesBinaryVectors', db)
    API_classes_df = API_classes_df.reset_index(drop=True)
    codes = API_classes_df['binary_vectors']
    all_list = list(map(lambda x: np.array(js.loads(x)['binary']), codes))
    json = js.loads(categories_features[categories_features.categories == 'API_classes']['features_name'].values[0])
    API_classes_fs = pd.DataFrame(all_list, columns=json['f'])
    API_classes_fs.columns = 'apic:' + API_classes_fs.columns
    API_classes_fs = pd.concat([API_classes_df['_id'], API_classes_fs], axis='columns')
    '''

    dfs = [permissions_df[['_id', 'label']], permissions_fs, receivers_fs,
           services_fs, activities_fs, actions_fs, categories_fs, API_methods_fs]
    total_fs = reduce(lambda left, right: merge(left, right), dfs)
    total_fs = total_fs.drop(['_id'], axis='columns')

    return total_fs
