import pandas as pd
import numpy as np
from functools import reduce


def df_split(data, label, num):
    pointer = round(len(data.columns) / num)

    result = []

    for i in range(0, num):
        if i + 1 != num:
            fraction = pd.concat([label, data.iloc[:, pointer * i: pointer * (i + 1)]], axis=1)
        else:
            fraction = pd.concat([label, data.iloc[:, pointer * i:]], axis=1)

        result.append(fraction)

    return result


def chunk_read(name, db):
    mat_name = name + 'VectorMatrix'
    n_records = db.get_collection(mat_name).find().count()
    df_list = []
    for i in range(0, n_records, 10):
        df = pd.DataFrame(list(db.get_collection(mat_name).find().skip(i).limit(10)))
        df_list.append(df)
    return pd.concat(df_list)


def fetch_all(db):
    permissions_df = chunk_read('permissions', db)
    permissions_fs = permissions_df.drop(['_id', 'app_name', 'label'], axis='columns')
    permissions_fs.columns = 'p:' + permissions_fs.columns
    permissions_fs = pd.concat([permissions_df['_id'], permissions_fs], axis='columns')

    receivers_df = chunk_read('receivers', db)
    receivers_fs = receivers_df.drop(['_id', 'app_name', 'label'], axis='columns')
    receivers_fs.columns = 'r:' + receivers_fs.columns
    receivers_fs = pd.concat([receivers_df['_id'], receivers_fs], axis='columns')

    services_df = chunk_read('services', db)
    services_fs = services_df.drop(['_id', 'app_name', 'label'], axis='columns')
    services_fs.columns = 's:' + services_fs.columns
    services_fs = pd.concat([services_df['_id'], services_fs], axis='columns')

    activities_df = chunk_read('activities', db)
    activities_fs = activities_df.drop(['_id', 'app_name', 'label'], axis='columns')
    activities_fs.columns = 'p:' + activities_fs.columns
    activities_fs = pd.concat([activities_df['_id'], activities_fs], axis='columns')

    API_methods_df = chunk_read('API_methods', db)
    API_methods_fs = API_methods_df.drop(['_id', 'app_name', 'label'], axis='columns')
    API_methods_fs.columns = 'p:' + API_methods_fs.columns
    API_methods_fs = pd.concat([API_methods_df['_id'], API_methods_fs], axis='columns')

    API_classes_df = chunk_read('API_classes', db)
    API_classes_fs = API_classes_df.drop(['_id', 'app_name', 'label'], axis='columns')
    API_classes_fs.columns = 'p:' + API_classes_fs.columns
    API_classes_fs = pd.concat([API_classes_df['_id'], API_classes_fs], axis='columns')

    dfs = [permissions_df[['_id', 'label']], permissions_fs, receivers_fs,
           services_fs, activities_fs, API_methods_fs, API_classes_fs]
    total_fs = reduce(lambda left, right: pd.merge(left, right, on='_id'), dfs)
    total_fs = total_fs.drop(['_id'], axis='columns')

    return total_fs
