import pandas as pd
import numpy as np
import json
import argparse
from sklearn.model_selection import KFold
import classifiers_kfold
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from db import connect_to_db
from db import get_database_name
from feature_selection import helper


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--outputCSV", default=False, action="store_true", help="output CSV",
                        required=False)
    parser.add_argument("--outputDB", default=False, action="store_true", help="output DB",
                        required=False)
    args = parser.parse_args()

    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    total_fs = helper.fetch_all_binary(db)

    ig = helper.chunk_read('IG_preprocessed', db)
    ig = ig.sort_values(by='IG', ascending=False, ignore_index=True)

    data = total_fs.drop(['label'], axis='columns')
    label = total_fs['label']

    ig_1 = ig['features'].head(round(len(ig) * 0.01))
    ig_5 = ig['features'].head(round(len(ig) * 0.05))
    ig_25 = ig['features'].head(round(len(ig) * 0.25))
    ig_50 = ig['features'].head(round(len(ig) * 0.50))
    ig_75 = ig['features'].head(round(len(ig) * 0.75))
    ig_mean = ig['features'][ig['IG'] >= np.mean(ig['IG'])]
    print(len(ig_mean))

    col_thresholds = [ig_1, ig_5, ig_25, ig_50, ig_75, ig_mean]
    threshold = ['1%', '5%', '25%', '50%', '75%', 'mean' + str(len(ig_mean))]
    classifiers = ['svm', 'xgb', 'dnn']
    kfold = KFold(n_splits=10, shuffle=True, random_state=11)

    result_dfs = []
    for classifier in classifiers:
        accuracies = []
        precisions = []
        recalls = []
        f1 = []
        time = []
        if classifier == 'svm':
            for col in col_thresholds:
                svm_accuracy, svm_precision, svm_recall, svm_f1, svm_time = \
                    classifiers_kfold.svm_10_fold(data[col], label, kfold)

                accuracies.append(svm_accuracy)
                precisions.append(svm_precision)
                recalls.append(svm_recall)
                f1.append(svm_f1)
                time.append(svm_time)

            result_svm = pd.DataFrame({'threshold': threshold,
                                       'accuracy': accuracies,
                                       'precision': precisions,
                                       'recall': recalls,
                                       'f1': f1,
                                       'time': time})

            result_dfs.append(result_svm)

        if classifier == 'xgb':
            for col in col_thresholds:
                xgb_accuracy, xgb_precision, xgb_recall, xgb_f1, xgb_time = \
                    classifiers_kfold.xgb_10_fold(data[col], label, kfold)

                accuracies.append(xgb_accuracy)
                precisions.append(xgb_precision)
                recalls.append(xgb_recall)
                f1.append(xgb_f1)
                time.append(xgb_time)

            result_xgb = pd.DataFrame({'threshold': threshold,
                                       'accuracy': accuracies,
                                       'precision': precisions,
                                       'recall': recalls,
                                       'f1': f1,
                                       'time': time})

            result_dfs.append(result_xgb)

        if classifier == 'dnn':
            for col in col_thresholds:
                dnn_accuracy, dnn_precision, dnn_recall, dnn_f1, dnn_time = \
                    classifiers_kfold.svm_10_fold(data[col], label, kfold)

                accuracies.append(dnn_accuracy)
                precisions.append(dnn_precision)
                recalls.append(dnn_recall)
                f1.append(dnn_f1)
                time.append(dnn_time)

            result_dnn = pd.DataFrame({'threshold': threshold,
                                       'accuracy': accuracies,
                                       'precision': precisions,
                                       'recall': recalls,
                                       'f1': f1,
                                       'time': time})

            result_dfs.append(result_dnn)

    if args.outputDB:
        for i in range(len(result_dfs)):
            mat_name = 'IG_' + classifiers[i]
            print('db: ', mat_name)
            col = db.get_collection(mat_name)
            col.insert_many(json.loads(result_dfs[i].to_json(orient='records', default_handler=str)))

    if args.outputCSV:
        for i in range(len(result_dfs)):
            mat_name = 'IG_' + classifiers[i]
            print('csv: ', mat_name)
            result_dfs[i].to_csv('csv_results/' + mat_name + '.csv', index=False)


if __name__ == "__main__":
    main()
