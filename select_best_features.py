import pandas as pd
import numpy as np
import argparse
import json
from sklearn.feature_selection import chi2
from feature_selection.algorithm import GeneticAlgorithm as ga
from feature_selection import helper
from feature_selection import ML_for_wrapper
from multiprocessing import Pool
from feature_selection.algorithm import IG

from db import connect_to_db
from db import get_database_name


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--outputCSV", default=False, action="store_true", help="output CSV",
                        required=False)
    parser.add_argument("--outputDB", default=False, action="store_true", help="output DB",
                        required=False)
    args = parser.parse_args()

    conn = connect_to_db()
    db = conn.get_database(get_database_name())
    total_fs = helper.fetch_preprocessed_all_binary(db)

    total_data = total_fs.drop(['label'], axis='columns')
    label = total_fs['label']

    print("Calculate Chi square")
    s, p = chi2(total_data, label)

    chi = pd.DataFrame({'features': total_data.columns, 'CHI2': s})

    print("Calculate Information gain")
    # multiprocessing :4 cores
    num_cores = 4
    pool = Pool(num_cores)
    job = helper.df_split(total_data, label, 4)
    outputs = pool.map(IG.information_gain, job)
    pool.close()
    pool.join()

    ig = pd.concat([outputs[0], outputs[1], outputs[2], outputs[3]], ignore_index=True)

    print("Run Ensemble")
    chi = chi.sort_values(by='CHI2', ascending=False, ignore_index=True)
    ig = ig.sort_values(by='IG', ascending=False, ignore_index=True)

    chi['chi_rank'] = np.arange(1,len(chi)+1)

    ig['ig_rank'] = np.arange(1, len(ig)+1)

    ensemble = chi.sort_values(by='features', ascending=False, ignore_index=True)[['features', 'chi_rank']]
    ensemble['ig_rank'] = ig.sort_values(by='features', ascending=False, ignore_index=True)['ig_rank']

    ensemble['mean_rank'] = (ensemble['ig_rank'] + ensemble['chi_rank']) / 2

    ensemble = ensemble.sort_values(by='mean_rank', ascending=True, ignore_index=True)
    ens_75 = ensemble['features'].head(round(len(ensemble) * 0.75))

    data = total_fs[ens_75]

    print("Run Genetic Algorithm")
    fitness = ML_for_wrapper.fitness_function_dnn
    survivor_strategy = 'plus'
    recombination_strategy = 'point'
    iteration = 100

    result = ga.GeneticAlgorithm(data, label, fitness=fitness, population_size=20, children_size=20,
                                 generations=iteration, survivor_strategy=survivor_strategy,
                                 recombination_strategy=recombination_strategy, njobs=2)
    selected_features = result.get_best_individual()

    result_df = pd.DataFrame({'features': selected_features})

    mat_name = 'bestFeatures'
    if args.outputDB:
        print('db: ', mat_name)
        col = db.get_collection(mat_name)
        if len(result_df) <= 10:
            col.insert_many(json.loads(result_df.to_json(orient='records', default_handler=str)))
        else:
            for i in range(0, len(result_df), 10):
                seq = result_df[i:i + 10]
                col.insert_many(json.loads(seq.to_json(orient='records', default_handler=str)))

    if args.outputCSV:
        print('csv: ', mat_name)
        result_df.to_csv('csv_results/' + mat_name + '.csv', index=False)

    iter_result = pd.DataFrame({'generation': np.arange(1, iteration + 1),
                                'fitness': result.iteration_fitness,
                                'ncol': result.iteration_ncol})

    mat_name = 'iter_best_features'
    if args.outputDB:
        print('db: ', mat_name)
        col = db.get_collection(mat_name)
        col.insert_many(json.loads(iter_result.to_json(orient='records', default_handler=str)))

    if args.outputCSV:
        print('csv: ', mat_name)
        iter_result.to_csv('csv_results/' + mat_name + '.csv', index=False)


if __name__ == "__main__":
    main()
